<?php

/**
 * @file
 * Integrates Kortaþjónustan Quick Checkout service with Drupal Commerce.
 */

define('KORTA_QUICKCHECKOUT_TXN_MODE_LIVE', 'live');
define('KORTA_QUICKCHECKOUT_TXN_MODE_TEST', 'test');
define('KORTA_SERVER_QUICKCHECKOUT_LIVE', 'https://netgreidslur.korta.is/');
define('KORTA_SERVER_QUICKCHECKOUT_TEST', 'https://netgreidslur.korta.is/testing/');

/**
 * Implements hook_menu().
 */
function korta_payment_quickcheckout_menu() {
  $items = array();

  // Define a path for the payment gateway to call back to update an order
  // status.
  $items['korta_payment/quickcheckout_status/%commerce_order/%commerce_payment_method_instance'] = array(
    'title' => 'Kortaþjónustan status callback',
    'description' => 'Page callback for Quick Checkout status POSTs.',
    'page callback' => 'korta_payment_quickcheckout_status_callback',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  // Define a path for a waiting page displayed whilst the iframe is loading.
  $items['korta_payment/quickcheckout_waiting_page'] = array(
    'page callback' => 'korta_payment_quickcheckout_waiting_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 *
 * Defines Kortaþjónustan Quick Checkout payment method.
 */
function korta_payment_quickcheckout_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['korta_payment_quickcheckout'] = array(
    'title' => t('Credit cards, instant payment from korta.is'),
    'description' => t('Integration with Kortaþjónustan'),
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
    'callbacks' => array(),
  );

  return $payment_methods;
}

/**
 * Builds the Kortaþjónustan Quick Checkout method settings form.
 *
 * @ingroup forms
 */
function korta_payment_quickcheckout_settings_form($settings = NULL) {
  $form = array();

  // Set defaults for first time load.
  $settings = (array) $settings + array(
    'merchant_id' => '',
    'merchant_terminal' => '',
    'mode' => 0,
    'payment_methods' => array('acc'),
    'secret' => '',
    'hide_login' => 0,
    'show_payment_methods' => 0,
  );
  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('The merchant ID for the Kortaþjónustan Quick Checkout account.'),
    '#default_value' => $settings['merchant_id'],
    '#required' => TRUE,
  );
    $form['merchant_terminal'] = array(
        '#type' => 'textfield',
        '#title' => t('Merchant Terminal'),
        '#description' => t('The merchant terminal for the Kortaþjónustan Quick Checkout account.'),
        '#default_value' => $settings['merchant_terminal'],
        '#required' => TRUE,
    );
  $form['secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret'),
    '#description' => t('You can create your secret word under "Merchant tools" on your Kortaþjónustan account page.'),
    '#default_value' => $settings['secret'],
    '#required' => TRUE,
  );
  $form['mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('When testing chose the test option, select live for using the real account (adjust credentials accordingly).'),
    '#options' => array(
      KORTA_QUICKCHECKOUT_TXN_MODE_LIVE => t('Live transactions in a live account'),
      KORTA_QUICKCHECKOUT_TXN_MODE_TEST => t('Test transactions in a test account'),
    ),
    '#default_value' => $settings['mode'],
  );
  $form['show_payment_methods'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show available payment methods on payment page'),
    '#description' => t('Show the customer a list of payment methods - if unticked, the customer will be prompted to select a payment method on the Kortaþjónustan site.'),
    '#default_value' => $settings['show_payment_methods'],
  );
  $form['payment_methods'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Available payment methods'),
    '#description' => t('Select which payment methods you would like to be make available to the customer.'),
    '#required' => TRUE,
    '#options' => array(
      'acc' => t('Credit Card'),
      'mae' => t('Maestro'),
      'amx' => t('American Express'),
      'vsa' => t('VISA (Euro 6000)'),
      'msc' => t('MASTERCARD (EURO 6000/4B)'),
    ),
    '#default_value' => $settings['payment_methods'],
  );
  $form['hide_login'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide login form on Kortaþjónustan payment page.'),
    '#default_value' => $settings['hide_login'],
    '#description' => t('Users have the option to register for Kortaþjónustan on the payment page - check this box to remove this option.'),
  );
  return $form;
}

/**
 * Provides the callback for Quick Checkout to post the payment status update.
 */
function korta_payment_quickcheckout_status_callback($order, $payment_method) {
  // Calculate the md5 of the status.
  if (!isset($_POST['checkvaluemd5'])) {
    exit;
  }
    // Prepare the feedback values sent by Korta for processing. We don't use
    // $_REQUEST since this includes the $_SESSION variables.
    $feedback = array_map('check_plain', $_GET + $_POST);
    unset($feedback['q']);

    $korta_reference = $_POST['reference'];
    $korta_checkvaluemd5 = $_POST['checkvaluemd5'];
    $korta_downloadmd5 = $_POST['downloadmd5'];
    switch ($payment_method['settings']['mode']) {
        case KORTA_QUICKCHECKOUT_TXN_MODE_LIVE:
            $verify_hash = md5(htmlentities('2' . $korta_checkvaluemd5  . $korta_reference . $payment_method['settings']['secret']));
            break;
        case KORTA_QUICKCHECKOUT_TXN_MODE_TEST:
            $verify_hash = md5(htmlentities('2' . $korta_checkvaluemd5  . $korta_reference . $payment_method['settings']['secret']. 'TEST' ));
            break;
    }

  if ($korta_downloadmd5 != $verify_hash) {
    // If the hash doesn't match log an error.
    watchdog('korta_payment_quickcheckout', t('Returned security hash does not match the one made out of the returned order.<br>Download Hash: %downloadhash , Check Value Hash: %checkvaluemd5, Reference: %reference'), array('%downloadhash'=>$korta_downloadmd5,'%checkvaluemd5'=>$korta_checkvaluemd5,'%reference'=>$korta_reference), WATCHDOG_ERROR);
    exit;
  }

  $korta_time = $_POST['time'];
  $korta_cardbrand = $_POST['cardbrand'];
  $korta_card4 =  $_POST['card4'];
    //print_r($feedback);
  watchdog('korta_payment_quickcheckout', t('Trx rcvd << Order %order , hash = %hash , Time = %time, CardBrand = %cardbrand, Card = %card <br> %payload'), array('%order'=>$order->order_id,'%hash'=>$korta_checkvaluemd5, '%time'=>$korta_time,'%cardbrand'=>$korta_cardbrand,'%card'=>$korta_card4), WATCHDOG_INFO);

  $balance = commerce_payment_order_balance($order);
  $data['amount'] = commerce_currency_amount_to_decimal($balance['amount'], $balance['currency_code']);
  $transaction = commerce_payment_transaction_new('korta_payment_quickcheckout', $order->order_id);
  $transaction->remote_id = $_POST['authcode'];
  $transaction->remote_status = $_POST['status'];
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = commerce_currency_amount_to_decimal($balance['amount'], $balance['currency_code']);
  $transaction->currency_code = $_POST['currency'];
  $transaction->payload = $feedback;

  if($korta_downloadmd5 == $verify_hash){
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('Payment successful.');
      watchdog('korta_payment_quickcheckout', t('Trx rcvd << Order %order paid'), array('%order'=>$order->order_id), WATCHDOG_INFO);
  }

  switch ($_POST['status']) {
    case -2: // Failed.
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('Payment failed with reason: %message', array('%message' => _korta_payment_quickcheckout_lookup_error_code($_POST['failed_reason_code'])));
      break;
    case 2: // Processed.
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('Payment successful.');
      break;
    case 0: // Pending.
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      $transaction->message = t('Payment pending');
      break;
    case -1: // Cancelled.
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('Payment failed because it was cancelled.');
      break;
  }
  commerce_payment_transaction_save($transaction);
}

/**
 * Defines the checkout form.
 *
 * @ingroup forms
 * @see korta_payment_quickcheckout_submit_form_validate()
 * @see korta_payment_quickcheckout_submit_form_submit()
 */
function korta_payment_quickcheckout_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  $settings = $payment_method['settings'];
  // Only show payment method options if the setting is selected.
  $form['quickcheckout_method'] = array(
    '#type' => 'radios',
    '#title' => t('Payment method'),
    '#description' => t('Select your preferred payment method.'),
    '#default_value' => 'acc',
    '#options' => korta_payment_quickcheckout_enabled_methods($payment_method['settings']),
    '#required' => TRUE,
    '#access' => (isset($settings['show_payment_methods']) && $settings['show_payment_methods'] == 1),
  );

  return $form;
}

/**
 * Handles submission of the checkout form.
 *
 * @see korta_payment_quickcheckout_submit_form()
 */
function korta_payment_quickcheckout_submit_form_submit($payment_method, $pane_form, $pane_values, &$order, $charge) {
  // Merge in values from the order.
  $order->data['quickcheckout']['quickcheckout_method'] = $pane_values['quickcheckout_method'];
}

/**
 * Redirects the user to the hosted payment page.
 */
function korta_payment_quickcheckout_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the merchant ID is not set.
  if (empty($payment_method['settings']['merchant_id'])) {
    drupal_set_message(t('Kortaþjónustan Quick Checkout Merchant ID has not been specified.'), 'error');
    return array();
  }
    // Return an error if the merchant terminal is not set.
    if (empty($payment_method['settings']['merchant_terminal'])) {
        drupal_set_message(t('Kortaþjónustan Quick Checkout Merchant terminal has not been specified.'), 'error');
        return array();
    }
  // Return an error if the secret word is not set.
  if (empty($payment_method['settings']['secret'])) {
    drupal_set_message(t('Kortaþjónustan Quick Checkout secret word needs to be set.'), 'error');
    return array();
  }

  $settings = array(
    // Callback for updating the transacton.
    'status' => url('korta_payment/quickcheckout_status/' . $order->order_id . '/' . $payment_method['instance_id'], array('absolute' => TRUE)),

    // Return to the previous page when the payment is cancelled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
  );

  return korta_payment_quickcheckout_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}


/**
 * Builds a Quick Checkout form and related iframe from an order object.
 *
 * @param $order
 *   The fully loaded order being paid for.
 * @param $settings
 *   An array of settings used to build out the form, including:
 *   - status: the URL Kortaþjónustan should call when the transaction is complete
 *   - cancel_return: the URL Kortaþjónustan should send the user to on cancellation
 *   - return: the URL Kortaþjónustan should send the user to on successful payment
 *
 * @return
 *   A renderable form array.
 */
function korta_payment_quickcheckout_order_form($form, &$form_state, $order, $settings) {
  // Add JavaScript to auto-submit the form we are about to create.
  // Very similar to commerce_payment.js, except it also hides our submit button.
  drupal_add_js(drupal_get_path('module', 'korta_payment_quickcheckout') . '/korta_payment_quickcheckout.js');

  // Load the customer profile for the order.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

  // Prepare the order details.
  $data = array();

  ////////////////////////////////////////
  // Korta Buyer Begins
  ////////////////////////////////////////
  // Get the customer's name. Depending on how the addressfield field is
  // configured, it might be set to full name, or first name and last name.
  $full_name = $address['name_line'];
  if ($full_name) {
    $data['name'] = $full_name;
  }
  else {
    // If the full name field is empty, assume the form is configured for first
    // name and last name.
    $data['name'] = $address['first_name'] . ' ' . $address['last_name'];
  }
  /*<input type="hidden" name="address" value="your_buyer_address">*/
  $data['address'] = $address['thoroughfare'];
  /*<input type="hidden" name="address2" value="your_buyer_address2">*/
  $data['address2'] = $address['premise'];
  /*<input type="hidden" name="email" value="your_buyer_email">*/
  $data['email'] = $order->mail;
  /*<input type="hidden" name="email2" value="your_buyer_email">*/
  $data['email2'] = $order->mail;
  /*<input type="hidden" name="zip" value="your_buyer_zip">*/
  $data['zip'] = $address['postal_code'];
  /*<input type="hidden" name="city" value="your_buyer_city">*/
  $data['city'] =  $address['locality'];
  /*<input type="hidden" name="country" value="your_buyer_country">*/
  $data['country'] = $address['country'];
  /*<input type="hidden" name="country" value="your_buyer_country">*/
  $data['phone'] = '5693100';
  /*<input type="hidden" name="terms" value="Y">*/
  $data['terms'] = 'Y';
  /*
   * If you have all of the above values filled,
   * you can skip the entry step in the KORTA WebPayment system
   * by adding the following value.
   * The buyer is then taken directly to the card entry step.
   * <input type="hidden" name="readonly" value="Y">
   */
  $data['readonly'] = 'Y';
  /*<input name="lang" type="hidden" value="your_buyer_language" > <!-- allowed values are "is" and "en>*/
  $data['lang'] = _korta_payment_quickcheckout_get_language();
  ////////////////////////////////////////
  // Korta Buyer Ends
  ////////////////////////////////////////
  ////////////////////////////////////////
  // Mandatory Fields for Korta begins
  ////////////////////////////////////////
  // Take the amount from the order balance.
  $balance = commerce_payment_order_balance($order);
  /*<input type='hidden' name='amount' value='<? echo $amount; ?>' />*/
  $data['amount'] = commerce_currency_amount_to_decimal($balance['amount'], $balance['currency_code']);
  /*<input type='hidden' name='currency' value='<? echo $cur; ?>' />*/
  $data['currency'] = $balance['currency_code'];
  /*<input type='hidden' name='merchant' value='<? echo $merchant; ?>' />*/
  $data['merchant'] = $settings['merchant_id'];
  /*<input type='hidden' name='terminal' value='<? echo $terminal; ?>' />*/
  $data['terminal'] = $settings['merchant_terminal'];
  /*<input name="description" type="hidden" value="your_product_description">*/
  $data['description'] = "Pöntun: " . $order->order_number;
  /*Reference - Ekki nógu vel skjalað hjá korta :-(*/
  $data['reference'] = $order->order_number;
  switch ($settings['mode']) {
    case KORTA_QUICKCHECKOUT_TXN_MODE_LIVE:
        $verify_hash = md5(htmlentities($data['amount'] . $data['currency'] . $settings['merchant_id'] . $settings['merchant_terminal'] . $data['description'] . $settings['secret']));
      break;
    case KORTA_QUICKCHECKOUT_TXN_MODE_TEST:
        $verify_hash = md5(htmlentities($data['amount'] . $data['currency'] . $settings['merchant_id'] . $settings['merchant_terminal'] . $data['description'] . $settings['secret']. 'TEST'));
      break;
  }
  //$verify_hash = md5(htmlentities($data['amount'] . $data['currency'] . $settings['merchant_id'] . $settings['merchant_terminal'] . $data['description'] . $settings['secret']. 'TEST'));
  $data['checkvaluemd5']= $verify_hash;
    $debug='TRUE';
    if ($debug) {
        watchdog('korta_payment_quickcheckout', t('Trx sent >> Order %order, Hash: %hash'), array('%hash' => $verify_hash,'%order' => $order->order_number), WATCHDOG_INFO);
    }
  ////////////////////////////////////////
  // Mandatory Fields for Korta ends
  ////////////////////////////////////////
  ////////////////////////////////////////
  // Callback Fields for Korta begins
  ////////////////////////////////////////
  /*<input type="hidden" name="look" value="SIMPLE">*/
  $data['look'] = "SIMPLE";
  /*<input type='hidden' name='downloadurl' value='<? echo $your_downloadurl; ?>' />*/
  $data['downloadurl'] = $settings['return'] . "/";
  $data['callbackurl'] = $settings['status'] . "/";
  /*<input type='hidden' name='refermethod' value='POST' />*/
  $data['refermethod'] = 'POST';
  /*<input type='hidden' name='refertarget' value='_top' />*/
  $data['refertarget'] = '_top';
  ////////////////////////////////////////
  // Callback Fields for Korta begins
  ////////////////////////////////////////

  // Only show the payment method options if the setting is selected.
  if (isset($settings['show_payment_methods']) && $settings['show_payment_methods'] == 1) {
    $data['payment_methods'] = strtoupper($order->data['quickcheckout']['quickcheckout_method']);
  }

  switch ($settings['mode']) {
    case KORTA_QUICKCHECKOUT_TXN_MODE_LIVE:
      $form['#action'] = KORTA_SERVER_QUICKCHECKOUT_LIVE;
      break;
    case KORTA_QUICKCHECKOUT_TXN_MODE_TEST:
      $form['#action'] = KORTA_SERVER_QUICKCHECKOUT_TEST;
      break;
  }

  $form['#attributes']['target'] = 'iframe_kortathjonustan';

  foreach ($data as $key => $value) {
    $form[$key] = array(
      '#type' => 'hidden',
      '#default_value' => $value,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to Kortaþjónustan'),
  );

  $form['iframe_kortathjonustan'] = array(
    '#markup' => '<iframe width="800" height="250" scrolling="no" frameborder="0" name="iframe_kortathjonustan" id="iframe_kortathjonustan" src="' . url('korta_payment/quickcheckout_waiting_page') . '"></iframe>',
  );
  return $form;
}

/**
 * Returns the language to be passed to Kortaþjónustan by comparing the current
 * language with the list of languages supported by Kortaþjónustan.
 */
function _korta_payment_quickcheckout_get_language() {
  global $language;

  $supported_languages = array('en', 'is');
  $current_language = substr($language->language, 0, 2);

  // If the current language is supported, return it.
  // Otherwise, fall back to English.
  return in_array($current_language, $supported_languages) ? $current_language : 'en';
}

/**
 * Returns an array of enabled payment methods.
 */
function korta_payment_quickcheckout_enabled_methods($settings) {
  $payment_choices = array();

  foreach ($settings['payment_methods'] as $payment_method) {
    if ($payment_method != '0') {
      $payment_type_details = _korta_payment_quickcheckout_lookup_payment_type_details($payment_method);
      $payment_choices[$payment_method] = $payment_type_details;
    }
  }

  return $payment_choices;
}

/**
 * Looks up the name for each payment type abbreviation.
 */
function _korta_payment_quickcheckout_lookup_payment_type_details($payment_type) {
  $module_path = drupal_get_path('module', 'korta_payment_quickcheckout');
  switch($payment_type) {
    case 'acc':
      $name = t('Credit Card');
      break;
    case 'mae':
      $name = t('Maestro');
      break;
    case 'amx':
      $name = t('American Express');
      break;
    case 'vsa':
      $name = t('VISA (Euro 6000)');
      break;
    case 'msc':
      $name = t('MASTERCARD (EURO 6000/4B)');
      break;
    default:
      $name = 'Unknown payment method (' . $payment_method . ')';
  }

  // @todo Where are the images? Why does it use hardcoded HTML?
  return '<span class="' . $payment_type . '"><img src = "/' . $module_path . '/images/' . $payment_type . '.png" />  ' .  $name . '</span>';
}

/**
 * Looks up the error message based on a supplied code.
 *
 * Heimildarkerfið mun bregðast við með mismunandi hætti þegar CVC kóði er notaður á eftirfarandi máta:
 * CVC=150 : Samþykkt
 * CVC=100 : Hafnað
 * CVC =946 : Tími útrunninn – Reynið aftur
 * CVC =909 : Kerfisvilla
 * CVC =898 : Svari seinkað lengur en 70 sekúndur
 * CVC = : Samþykkt
 */
function _korta_payment_quickcheckout_lookup_error_code($error_code) {
  switch ($error_code) {
    case 1: $msg = 'Referred'; break;
    case 2: $msg = 'Invalid Merchant Number'; break;
    case 3: $msg = 'Pick-up card'; break;
    case 4: $msg = 'Authorisation Declined'; break;
    case 5: $msg = 'Other Error'; break;
    case 6: $msg = 'CVV is mandatory, but not set or invalid'; break;
    case 7: $msg = 'Approved authorisation, honour with identification'; break;
    case 8: $msg = 'Delayed Processing'; break;
    case 9: $msg = 'Invalid Transaction'; break;
    case 10: $msg = 'Invalid Currency'; break;
    case 11: $msg = 'Invalid Amount/Available Limit Exceeded/Amount too high'; break;
    case 12: $msg = 'Invalid credit card or bank account'; break;
    case 13: $msg = 'Invalid Card Issuer'; break;
    case 14: $msg = 'Annulation by client'; break;
    case 15: $msg = 'Duplicate transaction'; break;
    case 16: $msg = 'Acquirer Error'; break;
    case 17: $msg = 'Reversal not processed, matching authorisation not found'; break;
    case 18: $msg = 'File Transfer not available/unsuccessful'; break;
    case 19: $msg = 'Reference number error'; break;
    case 20: $msg = 'Access Denied'; break;
    case 21: $msg = 'File Transfer failed'; break;
    case 22: $msg = 'Format Error'; break;
    case 23: $msg = 'Unknown Acquirer'; break;
    case 24: $msg = 'Card expired'; break;
    case 25: $msg = 'Fraud Suspicion'; break;
    case 26: $msg = 'Security code expired'; break;
    case 27: $msg = 'Requested function not available'; break;
    case 28: $msg = 'Lost/Stolen card'; break;
    case 29: $msg = 'Stolen card, Pick up'; break;
    case 30: $msg = 'Duplicate Authorisation'; break;
    case 31: $msg = 'Limit Exceeded'; break;
    case 32: $msg = 'Invalid Security Code'; break;
    case 33: $msg = 'Unknown or Invalid Card/Bank account'; break;
    case 34: $msg = 'Illegal Transaction'; break;
    case 35: $msg = 'Transaction Not Permitted'; break;
    case 36: $msg = 'Card blocked in local blacklist'; break;
    case 37: $msg = 'Restricted card/bank account'; break;
    case 38: $msg = 'Security Rules Violation'; break;
    case 39: $msg = 'The transaction amount of the referencing transaction is higher than the transaction amount of the original transaction'; break;
    case 40: $msg = 'Transaction frequency limit exceeded, override is possible'; break;
    case 41: $msg = 'Incorrect usage count in the Authorisation System exceeded'; break;
    case 42: $msg = 'Card blocked'; break;
    case 43: $msg = 'Rejected by Credit Card Issuer'; break;
    case 44: $msg = 'Card Issuing Bank or Network is not available'; break;
    case 45: $msg = 'The card type is not processed by the authorisation centre / Authorisation System has determined incorrect Routing'; break;
    case 47: $msg = 'Processing temporarily not possible'; break;
    case 48: $msg = 'Security Breach'; break;
    case 49: $msg = 'Date / time not plausible, trace-no. not increasing'; break;
    case 50: $msg = 'Error in PAC encryption detected'; break;
    case 51: $msg = 'System Error'; break;
    case 52: $msg = 'MB Denied - potential fraud'; break;
    case 53: $msg = 'Mobile verification failed'; break;
    case 54: $msg = 'Failed due to internal security restrictions'; break;
    case 55: $msg = 'Communication or verification problem'; break;
    case 56: $msg = '3D verification failed'; break;
    case 57: $msg = 'AVS check failed'; break;
    case 58: $msg = 'Invalid bank code'; break;
    case 59: $msg = 'Invalid account code'; break;
    case 60: $msg = 'Card not authorised'; break;
    case 61: $msg = 'No credit worthiness'; break;
    case 62: $msg = 'Communication error'; break;
    case 63: $msg = 'Transaction not allowed for cardholder'; break;
    case 64: $msg = 'Invalid Data in Request'; break;
    case 65: $msg = 'Blocked bank code'; break;
    case 66: $msg = 'CVV2/CVC2 Failure'; break;
  }

  return $msg;
}

/**
 * Outputs a temporary page before the Kortaþjónustan form is submitted.
 *
 * Since the form is submitted via a JavaScript call, this page is only really
 * visible to those that have JS turned off.
 */
function korta_payment_quickcheckout_waiting_page() {
  print ('<html><head><title></title></head><body><p>');
  print t('Please wait to be redirected to Kortaþjónustan.');
  print ('</p></body></html>');
}
